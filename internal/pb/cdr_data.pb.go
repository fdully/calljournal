// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: cdr_data.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CallPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Dirc string `protobuf:"bytes,3,opt,name=dirc,proto3" json:"dirc,omitempty"`
	Year string `protobuf:"bytes,5,opt,name=year,proto3" json:"year,omitempty"`
	Mont string `protobuf:"bytes,7,opt,name=mont,proto3" json:"mont,omitempty"`
	Dayx string `protobuf:"bytes,9,opt,name=dayx,proto3" json:"dayx,omitempty"`
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CallPath) Reset() {
	*x = CallPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdr_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallPath) ProtoMessage() {}

func (x *CallPath) ProtoReflect() protoreflect.Message {
	mi := &file_cdr_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallPath.ProtoReflect.Descriptor instead.
func (*CallPath) Descriptor() ([]byte, []int) {
	return file_cdr_data_proto_rawDescGZIP(), []int{0}
}

func (x *CallPath) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CallPath) GetDirc() string {
	if x != nil {
		return x.Dirc
	}
	return ""
}

func (x *CallPath) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *CallPath) GetMont() string {
	if x != nil {
		return x.Mont
	}
	return ""
}

func (x *CallPath) GetDayx() string {
	if x != nil {
		return x.Dayx
	}
	return ""
}

func (x *CallPath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SaveCDRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*SaveCDRRequest_Callpath
	//	*SaveCDRRequest_CdrChunk
	Data isSaveCDRRequest_Data `protobuf_oneof:"data"`
}

func (x *SaveCDRRequest) Reset() {
	*x = SaveCDRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdr_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCDRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCDRRequest) ProtoMessage() {}

func (x *SaveCDRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdr_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCDRRequest.ProtoReflect.Descriptor instead.
func (*SaveCDRRequest) Descriptor() ([]byte, []int) {
	return file_cdr_data_proto_rawDescGZIP(), []int{1}
}

func (m *SaveCDRRequest) GetData() isSaveCDRRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SaveCDRRequest) GetCallpath() *CallPath {
	if x, ok := x.GetData().(*SaveCDRRequest_Callpath); ok {
		return x.Callpath
	}
	return nil
}

func (x *SaveCDRRequest) GetCdrChunk() []byte {
	if x, ok := x.GetData().(*SaveCDRRequest_CdrChunk); ok {
		return x.CdrChunk
	}
	return nil
}

type isSaveCDRRequest_Data interface {
	isSaveCDRRequest_Data()
}

type SaveCDRRequest_Callpath struct {
	Callpath *CallPath `protobuf:"bytes,1,opt,name=callpath,proto3,oneof"`
}

type SaveCDRRequest_CdrChunk struct {
	CdrChunk []byte `protobuf:"bytes,2,opt,name=cdr_chunk,json=cdrChunk,proto3,oneof"`
}

func (*SaveCDRRequest_Callpath) isSaveCDRRequest_Data() {}

func (*SaveCDRRequest_CdrChunk) isSaveCDRRequest_Data() {}

type SaveCDRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Size uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SaveCDRResponse) Reset() {
	*x = SaveCDRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdr_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCDRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCDRResponse) ProtoMessage() {}

func (x *SaveCDRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdr_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCDRResponse.ProtoReflect.Descriptor instead.
func (*SaveCDRResponse) Descriptor() ([]byte, []int) {
	return file_cdr_data_proto_rawDescGZIP(), []int{2}
}

func (x *SaveCDRResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SaveCDRResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SaveRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*SaveRecordRequest_Callpath
	//	*SaveRecordRequest_RecordChunk
	Data isSaveRecordRequest_Data `protobuf_oneof:"data"`
}

func (x *SaveRecordRequest) Reset() {
	*x = SaveRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdr_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRecordRequest) ProtoMessage() {}

func (x *SaveRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdr_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRecordRequest.ProtoReflect.Descriptor instead.
func (*SaveRecordRequest) Descriptor() ([]byte, []int) {
	return file_cdr_data_proto_rawDescGZIP(), []int{3}
}

func (m *SaveRecordRequest) GetData() isSaveRecordRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SaveRecordRequest) GetCallpath() *CallPath {
	if x, ok := x.GetData().(*SaveRecordRequest_Callpath); ok {
		return x.Callpath
	}
	return nil
}

func (x *SaveRecordRequest) GetRecordChunk() []byte {
	if x, ok := x.GetData().(*SaveRecordRequest_RecordChunk); ok {
		return x.RecordChunk
	}
	return nil
}

type isSaveRecordRequest_Data interface {
	isSaveRecordRequest_Data()
}

type SaveRecordRequest_Callpath struct {
	Callpath *CallPath `protobuf:"bytes,1,opt,name=callpath,proto3,oneof"`
}

type SaveRecordRequest_RecordChunk struct {
	RecordChunk []byte `protobuf:"bytes,2,opt,name=record_chunk,json=recordChunk,proto3,oneof"`
}

func (*SaveRecordRequest_Callpath) isSaveRecordRequest_Data() {}

func (*SaveRecordRequest_RecordChunk) isSaveRecordRequest_Data() {}

type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileChunk []byte `protobuf:"bytes,1,opt,name=file_chunk,json=fileChunk,proto3" json:"file_chunk,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdr_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdr_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_cdr_data_proto_rawDescGZIP(), []int{4}
}

func (x *GetFileResponse) GetFileChunk() []byte {
	if x != nil {
		return x.FileChunk
	}
	return nil
}

var File_cdr_data_proto protoreflect.FileDescriptor

var file_cdr_data_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x64, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x82, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x69, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x79, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x44, 0x52,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x09, 0x63, 0x64, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x64, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x43,
	0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x69, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x32,
	0x9c, 0x01, 0x0a, 0x0a, 0x43, 0x44, 0x52, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x1a, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x44, 0x52, 0x12, 0x0f, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x44, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x44, 0x52, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x06,
	0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cdr_data_proto_rawDescOnce sync.Once
	file_cdr_data_proto_rawDescData = file_cdr_data_proto_rawDesc
)

func file_cdr_data_proto_rawDescGZIP() []byte {
	file_cdr_data_proto_rawDescOnce.Do(func() {
		file_cdr_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdr_data_proto_rawDescData)
	})
	return file_cdr_data_proto_rawDescData
}

var file_cdr_data_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cdr_data_proto_goTypes = []interface{}{
	(*CallPath)(nil),          // 0: CallPath
	(*SaveCDRRequest)(nil),    // 1: SaveCDRRequest
	(*SaveCDRResponse)(nil),   // 2: SaveCDRResponse
	(*SaveRecordRequest)(nil), // 3: SaveRecordRequest
	(*GetFileResponse)(nil),   // 4: GetFileResponse
}
var file_cdr_data_proto_depIdxs = []int32{
	0, // 0: SaveCDRRequest.callpath:type_name -> CallPath
	0, // 1: SaveRecordRequest.callpath:type_name -> CallPath
	0, // 2: CDRService.GetFile:input_type -> CallPath
	1, // 3: CDRService.SaveCDR:input_type -> SaveCDRRequest
	3, // 4: CDRService.SaveRecord:input_type -> SaveRecordRequest
	4, // 5: CDRService.GetFile:output_type -> GetFileResponse
	2, // 6: CDRService.SaveCDR:output_type -> SaveCDRResponse
	2, // 7: CDRService.SaveRecord:output_type -> SaveCDRResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cdr_data_proto_init() }
func file_cdr_data_proto_init() {
	if File_cdr_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdr_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdr_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCDRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdr_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCDRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdr_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdr_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cdr_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SaveCDRRequest_Callpath)(nil),
		(*SaveCDRRequest_CdrChunk)(nil),
	}
	file_cdr_data_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SaveRecordRequest_Callpath)(nil),
		(*SaveRecordRequest_RecordChunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdr_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cdr_data_proto_goTypes,
		DependencyIndexes: file_cdr_data_proto_depIdxs,
		MessageInfos:      file_cdr_data_proto_msgTypes,
	}.Build()
	File_cdr_data_proto = out.File
	file_cdr_data_proto_rawDesc = nil
	file_cdr_data_proto_goTypes = nil
	file_cdr_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CDRServiceClient is the client API for CDRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDRServiceClient interface {
	GetFile(ctx context.Context, in *CallPath, opts ...grpc.CallOption) (CDRService_GetFileClient, error)
	SaveCDR(ctx context.Context, opts ...grpc.CallOption) (CDRService_SaveCDRClient, error)
	SaveRecord(ctx context.Context, opts ...grpc.CallOption) (CDRService_SaveRecordClient, error)
}

type cDRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCDRServiceClient(cc grpc.ClientConnInterface) CDRServiceClient {
	return &cDRServiceClient{cc}
}

func (c *cDRServiceClient) GetFile(ctx context.Context, in *CallPath, opts ...grpc.CallOption) (CDRService_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDRService_serviceDesc.Streams[0], "/CDRService/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDRServiceGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDRService_GetFileClient interface {
	Recv() (*GetFileResponse, error)
	grpc.ClientStream
}

type cDRServiceGetFileClient struct {
	grpc.ClientStream
}

func (x *cDRServiceGetFileClient) Recv() (*GetFileResponse, error) {
	m := new(GetFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDRServiceClient) SaveCDR(ctx context.Context, opts ...grpc.CallOption) (CDRService_SaveCDRClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDRService_serviceDesc.Streams[1], "/CDRService/SaveCDR", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDRServiceSaveCDRClient{stream}
	return x, nil
}

type CDRService_SaveCDRClient interface {
	Send(*SaveCDRRequest) error
	CloseAndRecv() (*SaveCDRResponse, error)
	grpc.ClientStream
}

type cDRServiceSaveCDRClient struct {
	grpc.ClientStream
}

func (x *cDRServiceSaveCDRClient) Send(m *SaveCDRRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDRServiceSaveCDRClient) CloseAndRecv() (*SaveCDRResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveCDRResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDRServiceClient) SaveRecord(ctx context.Context, opts ...grpc.CallOption) (CDRService_SaveRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDRService_serviceDesc.Streams[2], "/CDRService/SaveRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDRServiceSaveRecordClient{stream}
	return x, nil
}

type CDRService_SaveRecordClient interface {
	Send(*SaveRecordRequest) error
	CloseAndRecv() (*SaveCDRResponse, error)
	grpc.ClientStream
}

type cDRServiceSaveRecordClient struct {
	grpc.ClientStream
}

func (x *cDRServiceSaveRecordClient) Send(m *SaveRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDRServiceSaveRecordClient) CloseAndRecv() (*SaveCDRResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveCDRResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CDRServiceServer is the server API for CDRService service.
type CDRServiceServer interface {
	GetFile(*CallPath, CDRService_GetFileServer) error
	SaveCDR(CDRService_SaveCDRServer) error
	SaveRecord(CDRService_SaveRecordServer) error
}

// UnimplementedCDRServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCDRServiceServer struct {
}

func (*UnimplementedCDRServiceServer) GetFile(*CallPath, CDRService_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedCDRServiceServer) SaveCDR(CDRService_SaveCDRServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveCDR not implemented")
}
func (*UnimplementedCDRServiceServer) SaveRecord(CDRService_SaveRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveRecord not implemented")
}

func RegisterCDRServiceServer(s *grpc.Server, srv CDRServiceServer) {
	s.RegisterService(&_CDRService_serviceDesc, srv)
}

func _CDRService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallPath)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDRServiceServer).GetFile(m, &cDRServiceGetFileServer{stream})
}

type CDRService_GetFileServer interface {
	Send(*GetFileResponse) error
	grpc.ServerStream
}

type cDRServiceGetFileServer struct {
	grpc.ServerStream
}

func (x *cDRServiceGetFileServer) Send(m *GetFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CDRService_SaveCDR_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDRServiceServer).SaveCDR(&cDRServiceSaveCDRServer{stream})
}

type CDRService_SaveCDRServer interface {
	SendAndClose(*SaveCDRResponse) error
	Recv() (*SaveCDRRequest, error)
	grpc.ServerStream
}

type cDRServiceSaveCDRServer struct {
	grpc.ServerStream
}

func (x *cDRServiceSaveCDRServer) SendAndClose(m *SaveCDRResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDRServiceSaveCDRServer) Recv() (*SaveCDRRequest, error) {
	m := new(SaveCDRRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CDRService_SaveRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDRServiceServer).SaveRecord(&cDRServiceSaveRecordServer{stream})
}

type CDRService_SaveRecordServer interface {
	SendAndClose(*SaveCDRResponse) error
	Recv() (*SaveRecordRequest, error)
	grpc.ServerStream
}

type cDRServiceSaveRecordServer struct {
	grpc.ServerStream
}

func (x *cDRServiceSaveRecordServer) SendAndClose(m *SaveCDRResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDRServiceSaveRecordServer) Recv() (*SaveRecordRequest, error) {
	m := new(SaveRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CDRService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CDRService",
	HandlerType: (*CDRServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _CDRService_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveCDR",
			Handler:       _CDRService_SaveCDR_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SaveRecord",
			Handler:       _CDRService_SaveRecord_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cdr_data.proto",
}
