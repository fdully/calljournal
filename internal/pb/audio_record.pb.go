// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: audio_record.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Dirc  string `protobuf:"bytes,5,opt,name=dirc,proto3" json:"dirc,omitempty"`
	Year  string `protobuf:"bytes,7,opt,name=year,proto3" json:"year,omitempty"`
	Month string `protobuf:"bytes,9,opt,name=month,proto3" json:"month,omitempty"`
	Day   string `protobuf:"bytes,11,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *RecordInfo) Reset() {
	*x = RecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordInfo) ProtoMessage() {}

func (x *RecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordInfo.ProtoReflect.Descriptor instead.
func (*RecordInfo) Descriptor() ([]byte, []int) {
	return file_audio_record_proto_rawDescGZIP(), []int{0}
}

func (x *RecordInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecordInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordInfo) GetDirc() string {
	if x != nil {
		return x.Dirc
	}
	return ""
}

func (x *RecordInfo) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *RecordInfo) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *RecordInfo) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

type SaveAudioRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*SaveAudioRecordRequest_Info
	//	*SaveAudioRecordRequest_RecordChunk
	Data isSaveAudioRecordRequest_Data `protobuf_oneof:"data"`
}

func (x *SaveAudioRecordRequest) Reset() {
	*x = SaveAudioRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAudioRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAudioRecordRequest) ProtoMessage() {}

func (x *SaveAudioRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAudioRecordRequest.ProtoReflect.Descriptor instead.
func (*SaveAudioRecordRequest) Descriptor() ([]byte, []int) {
	return file_audio_record_proto_rawDescGZIP(), []int{1}
}

func (m *SaveAudioRecordRequest) GetData() isSaveAudioRecordRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SaveAudioRecordRequest) GetInfo() *RecordInfo {
	if x, ok := x.GetData().(*SaveAudioRecordRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *SaveAudioRecordRequest) GetRecordChunk() []byte {
	if x, ok := x.GetData().(*SaveAudioRecordRequest_RecordChunk); ok {
		return x.RecordChunk
	}
	return nil
}

type isSaveAudioRecordRequest_Data interface {
	isSaveAudioRecordRequest_Data()
}

type SaveAudioRecordRequest_Info struct {
	Info *RecordInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type SaveAudioRecordRequest_RecordChunk struct {
	RecordChunk []byte `protobuf:"bytes,2,opt,name=record_chunk,json=recordChunk,proto3,oneof"`
}

func (*SaveAudioRecordRequest_Info) isSaveAudioRecordRequest_Data() {}

func (*SaveAudioRecordRequest_RecordChunk) isSaveAudioRecordRequest_Data() {}

type SaveAudioRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Size uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SaveAudioRecordResponse) Reset() {
	*x = SaveAudioRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAudioRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAudioRecordResponse) ProtoMessage() {}

func (x *SaveAudioRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAudioRecordResponse.ProtoReflect.Descriptor instead.
func (*SaveAudioRecordResponse) Descriptor() ([]byte, []int) {
	return file_audio_record_proto_rawDescGZIP(), []int{2}
}

func (x *SaveAudioRecordResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SaveAudioRecordResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_audio_record_proto protoreflect.FileDescriptor

var file_audio_record_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x72, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x68, 0x0a, 0x16, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x5c, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x17, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_record_proto_rawDescOnce sync.Once
	file_audio_record_proto_rawDescData = file_audio_record_proto_rawDesc
)

func file_audio_record_proto_rawDescGZIP() []byte {
	file_audio_record_proto_rawDescOnce.Do(func() {
		file_audio_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_record_proto_rawDescData)
	})
	return file_audio_record_proto_rawDescData
}

var file_audio_record_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_audio_record_proto_goTypes = []interface{}{
	(*RecordInfo)(nil),              // 0: RecordInfo
	(*SaveAudioRecordRequest)(nil),  // 1: SaveAudioRecordRequest
	(*SaveAudioRecordResponse)(nil), // 2: SaveAudioRecordResponse
}
var file_audio_record_proto_depIdxs = []int32{
	0, // 0: SaveAudioRecordRequest.info:type_name -> RecordInfo
	1, // 1: AudioRecordService.SaveAudioRecord:input_type -> SaveAudioRecordRequest
	2, // 2: AudioRecordService.SaveAudioRecord:output_type -> SaveAudioRecordResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_audio_record_proto_init() }
func file_audio_record_proto_init() {
	if File_audio_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAudioRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAudioRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_audio_record_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SaveAudioRecordRequest_Info)(nil),
		(*SaveAudioRecordRequest_RecordChunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_record_proto_goTypes,
		DependencyIndexes: file_audio_record_proto_depIdxs,
		MessageInfos:      file_audio_record_proto_msgTypes,
	}.Build()
	File_audio_record_proto = out.File
	file_audio_record_proto_rawDesc = nil
	file_audio_record_proto_goTypes = nil
	file_audio_record_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AudioRecordServiceClient is the client API for AudioRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AudioRecordServiceClient interface {
	SaveAudioRecord(ctx context.Context, opts ...grpc.CallOption) (AudioRecordService_SaveAudioRecordClient, error)
}

type audioRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioRecordServiceClient(cc grpc.ClientConnInterface) AudioRecordServiceClient {
	return &audioRecordServiceClient{cc}
}

func (c *audioRecordServiceClient) SaveAudioRecord(ctx context.Context, opts ...grpc.CallOption) (AudioRecordService_SaveAudioRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AudioRecordService_serviceDesc.Streams[0], "/AudioRecordService/SaveAudioRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioRecordServiceSaveAudioRecordClient{stream}
	return x, nil
}

type AudioRecordService_SaveAudioRecordClient interface {
	Send(*SaveAudioRecordRequest) error
	CloseAndRecv() (*SaveAudioRecordResponse, error)
	grpc.ClientStream
}

type audioRecordServiceSaveAudioRecordClient struct {
	grpc.ClientStream
}

func (x *audioRecordServiceSaveAudioRecordClient) Send(m *SaveAudioRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioRecordServiceSaveAudioRecordClient) CloseAndRecv() (*SaveAudioRecordResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveAudioRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioRecordServiceServer is the server API for AudioRecordService service.
type AudioRecordServiceServer interface {
	SaveAudioRecord(AudioRecordService_SaveAudioRecordServer) error
}

// UnimplementedAudioRecordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAudioRecordServiceServer struct {
}

func (*UnimplementedAudioRecordServiceServer) SaveAudioRecord(AudioRecordService_SaveAudioRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveAudioRecord not implemented")
}

func RegisterAudioRecordServiceServer(s *grpc.Server, srv AudioRecordServiceServer) {
	s.RegisterService(&_AudioRecordService_serviceDesc, srv)
}

func _AudioRecordService_SaveAudioRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioRecordServiceServer).SaveAudioRecord(&audioRecordServiceSaveAudioRecordServer{stream})
}

type AudioRecordService_SaveAudioRecordServer interface {
	SendAndClose(*SaveAudioRecordResponse) error
	Recv() (*SaveAudioRecordRequest, error)
	grpc.ServerStream
}

type audioRecordServiceSaveAudioRecordServer struct {
	grpc.ServerStream
}

func (x *audioRecordServiceSaveAudioRecordServer) SendAndClose(m *SaveAudioRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioRecordServiceSaveAudioRecordServer) Recv() (*SaveAudioRecordRequest, error) {
	m := new(SaveAudioRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AudioRecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AudioRecordService",
	HandlerType: (*AudioRecordServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveAudioRecord",
			Handler:       _AudioRecordService_SaveAudioRecord_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "audio_record.proto",
}
