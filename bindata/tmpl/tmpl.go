// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package tmpl generated by go-bindata.// sources:
// templates/base.layout.gohtml
// templates/call.layout.gohtml
// templates/debug-call.layout.gohtml
// templates/debug.page.gohtml
// templates/help.page.gohtml
// templates/home.page.gohtml
// templates/search.page.gohtml
package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseLayoutGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x3d\x6e\xdc\x3c\x10\xed\x75\x8a\x31\x6b\x73\x85\xef\x4b\x93\x42\xdc\x26\x37\x88\x4f\x30\x12\x67\x25\xc6\xd4\x50\x21\x47\xb2\x17\x0b\x15\x29\x03\x04\xc8\x55\x8c\xa4\x09\xf2\xe3\x5c\x41\x7b\xa3\x40\x5a\x39\xde\xb8\x09\x60\x20\x15\xa1\x37\x4f\xf3\x1e\x9f\x9e\x0e\x07\x4b\x3b\xc7\x04\xaa\xc4\x44\x6a\x1c\xb3\xe2\xc2\x86\x4a\xf6\x1d\x41\x23\xad\xdf\x66\xc5\x7c\x80\x47\xae\x8d\x22\x56\x33\x40\x68\xb7\x19\x00\x40\x71\xa1\x35\xbc\xa6\xb7\xbd\x8b\x64\xa1\x25\x41\x10\xac\x13\x68\xbd\xce\x17\xa8\x6a\x30\x26\x12\xa3\x7a\xd9\xe9\x97\xea\x7c\xc4\xd8\x92\x51\x83\xa3\x9b\x2e\x44\x51\x50\x05\x16\x62\x31\xea\xc6\x59\x69\x8c\xa5\xc1\x55\xa4\x97\x87\x4b\x70\xec\xc4\xa1\xd7\xa9\x42\x4f\xe6\xbf\x4b\x48\x4d\x74\x7c\xad\x25\xe8\x9d\x13\xc3\x41\x6d\xb3\x47\x5b\xaf\xae\xae\x20\xb0\xdf\x3f\x9a\xf1\x8e\xaf\xa1\x89\xb4\x33\x2a\x4f\x82\xe2\xaa\xbc\x0c\x41\x92\x44\xec\x36\xad\xe3\x4d\x95\x92\x82\x48\xde\xa8\x24\x7b\x4f\xa9\x21\x9a\x3d\xc5\x90\x52\x88\xae\x76\x6c\x14\x72\xe0\x7d\x1b\xfa\xf4\x5b\x6b\xd9\xba\xbc\xe4\xaa\xc0\xea\x89\xc0\x0e\x87\x19\xde\x74\x5c\x2b\x98\x53\x35\xca\xb5\x58\x53\x7e\xab\x17\xfa\xc3\x16\x71\xe2\x69\x7b\x38\x08\xb5\x9d\x47\x21\x50\x0b\xa2\x60\x33\x8e\x45\x7e\x9a\x66\x45\x7e\x8a\xbe\x28\x83\xdd\xaf\x97\xb2\x6e\x80\xca\x63\x4a\x46\xcd\xe1\xa1\x63\x8a\xd0\x8a\xfe\x7f\xcd\x79\x21\xf5\xfe\x81\xc3\x38\x00\xe3\x50\x62\xd4\x16\xe3\x35\x94\xf5\xe9\x5c\x31\xba\xed\x90\xad\xf6\x35\xbc\xe9\x93\xb8\xdd\x5e\xaf\x5f\x44\x57\xc4\x42\xf1\x6c\xe9\x7a\xf9\xb3\xc5\x25\x46\x68\x93\x7e\xf1\x84\xb4\x10\xf1\x4f\x9e\x2e\x23\xb2\x7d\x08\x6b\x93\x37\xa1\x25\xb5\x9d\x3e\x4f\xdf\xa6\xbb\xe9\xd3\xf4\x63\xba\x3b\x7e\x2c\x72\x7c\xa2\x96\x7b\xf7\x8f\xf4\x13\x61\xac\x1a\xb5\x9d\x7e\x4e\xf7\xd3\x97\xe3\xbb\xe9\xeb\x73\xd5\xb1\x97\xf0\x9c\x00\xc8\x77\xab\xfc\xf7\xe9\xfe\xf8\xfe\xf8\xe1\x2f\x06\x8a\xbc\xf7\x6b\x05\x72\xeb\x86\xb5\x47\xe7\x05\x9a\x4b\xb2\xf4\x27\xcb\x8a\xfc\xd4\x98\x22\x3f\xfd\xd3\x87\x03\xb1\x1d\xc7\x5f\x01\x00\x00\xff\xff\xa5\x24\xb9\xbd\xfd\x03\x00\x00")

func baseLayoutGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseLayoutGohtml,
		"base.layout.gohtml",
	)
}

func baseLayoutGohtml() (*asset, error) {
	bytes, err := baseLayoutGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.layout.gohtml", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1610717231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _callLayoutGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xc1\x6e\xe3\x36\x10\xbd\xe7\x2b\x06\xbc\xb8\x05\x22\x8a\x94\x2c\xd9\x5e\x58\x29\x90\xe4\xd0\x02\xdb\x3d\x34\xcd\xde\x19\x89\xb1\x88\xd2\x94\x4b\xd1\xd2\xb6\x86\x0e\x49\x51\x14\x05\x16\xed\xbf\x14\x31\xe0\x26\x8d\xbf\x81\xfa\xa3\x42\xb2\xb3\x96\x37\x0e\x8a\xb6\x87\x35\x60\x83\x9c\x79\xf3\xe6\x91\x6f\x60\x2e\x16\x09\xbf\x16\x8a\x03\x8a\x99\x94\xa8\xaa\x8e\x8e\x00\x00\xc6\x89\x28\x20\x96\x2c\xcf\x23\x14\x67\xca\x30\xa1\xb8\x86\xa9\x71\x7c\x74\xd2\x02\x5a\x50\x1a\x9e\x2c\x16\xf8\x94\xe5\xfc\x8c\x49\x89\x2f\x2f\xbf\x3a\xc7\x17\x46\x0b\x35\xa9\xaa\xb1\x9b\x86\x1f\x43\xc5\x35\xf0\xef\x61\x57\x70\x2e\x34\x8f\x8d\xc8\x14\x20\xa1\x62\x54\x55\xf6\x8f\xfa\x67\xbb\xb6\x77\xf5\xef\xf5\xaf\x76\x65\xff\x5c\x2c\xb8\xcc\x79\x55\xd9\x55\x7d\xf3\x2c\xa3\x92\xaa\x82\x6e\xff\x0b\xc3\xb4\xb9\x30\x6c\x3a\x3b\xd4\xde\xde\xd7\xb7\x76\xfd\x6a\xaf\xe2\x32\xe7\x5a\xb1\x29\xaf\x2a\xb0\xf7\x76\x6d\xff\xaa\x7f\xda\x07\x9c\xf3\xdc\x08\xc5\x1a\x8d\x6f\xe6\xd3\x2b\xae\x0f\x31\xd7\x37\x76\x6d\x97\xf6\xce\xae\xec\xa3\x5d\xda\x47\xbb\xb2\xcb\x96\xe6\x2c\x53\x8a\xc7\xe6\x5b\xd1\x76\xa8\x6f\xec\xd2\xde\x63\xb0\x77\xf6\xc1\xae\xea\x5b\xbb\xb4\x0f\xf5\x7b\xfb\x68\xd7\xf5\x4d\x7d\x5b\xbf\xdf\xef\x7c\x2a\xa4\xcc\x79\xbc\xab\x3b\x70\xa2\x75\x7d\x6b\xef\xed\x43\xfd\x5b\xfd\xcb\x5e\xdf\x73\x91\xc7\x9b\xd6\xfb\x72\x5b\x07\x14\x07\xfc\x0d\x8f\x33\x9d\xbc\x61\x53\x0e\xa8\xf1\x1c\x3e\x7c\xc6\xb3\x93\xce\xae\x8d\x30\x48\x35\xbf\x8e\x10\x7a\x1a\x88\x2b\xa3\xe0\xca\x28\x67\xa6\xc5\x94\xe9\x1f\x10\x64\x2a\x96\x22\xfe\x2e\x42\xa5\x50\x49\x56\xe2\x6c\xc6\xd5\x67\x3d\x97\xcd\x84\x5b\x50\x57\x8a\xdc\x70\xf5\xc5\x7c\x2e\x92\xe8\xc5\x71\xe9\x1d\xf7\xa6\x33\xbf\x77\xdc\x2b\x45\x62\xd2\xc8\x27\xe4\x38\xe5\x62\x92\x9a\xc8\x23\xa4\xf7\x39\xfa\x58\x55\xab\x2c\x2f\x26\xf0\x6e\x2a\x55\x1e\xa1\xd4\x98\xd9\x2b\xd7\x2d\xcb\x12\x97\x3e\xce\xf4\xc4\xf5\x08\x21\x6e\x5e\x4c\x10\x6c\x28\x11\x0d\x11\x6c\x39\xdb\xf5\xb5\x90\x32\x42\xf1\x5c\x6b\xae\xcc\x59\x26\x33\xbd\x3b\xa1\x80\x2b\xe1\xc4\x4c\x73\xe3\xe8\xa6\xc2\x69\xc0\x08\x0a\xc1\xcb\xd3\xec\x5d\x84\x08\x10\xa0\x21\xd0\xf0\xa0\xb0\xcd\x45\x32\x93\x42\x12\xa1\xaf\xa9\x87\x69\x1f\x86\x78\x10\xf8\xd2\x09\x70\x7f\xe8\x41\x1f\x0f\x46\x61\xec\xe0\xb0\x1f\xe2\x20\x0c\x1d\x8a\xc3\x60\x88\x29\xd9\xae\x9c\x06\xfb\xd6\xc7\x1e\xe9\x33\x0a\x14\xda\x6e\xd0\xa4\x46\x6d\x4a\x36\x2c\x1b\x92\x4e\x9e\x00\xc5\x01\x09\x7f\x44\xee\xc1\xcb\x6a\xee\xe2\x99\xb7\x2e\x7b\xd1\xee\x7f\x65\xdf\xcb\xb3\x91\x64\xa5\x92\x19\x4b\x22\xb4\x58\x74\xe6\xae\xaa\x3e\x89\xa5\x4f\x6a\xfe\x83\x95\x0d\xb7\xa3\xe7\x92\x47\x88\x17\x5c\x65\x49\x82\x5a\x7b\x71\x00\x23\x3c\x62\x38\xc0\xc1\xd6\x88\x66\x59\x78\x38\xf8\xe0\x4d\xeb\x5e\x4a\xbd\x6e\xc0\xa1\x85\xd3\x60\x3a\x75\x14\x48\x5b\xe6\x81\xb7\xc5\x78\xe0\x7d\xe9\x75\xf7\x8e\xf7\xac\x0a\x07\x0e\x0e\x5e\x30\xfd\x9f\xd5\x0f\x9a\x19\x04\x4a\xf1\x30\xe8\xef\x58\x09\xe0\x01\x19\x02\x91\xbe\xe3\x77\xa2\x4e\x13\x6d\x7f\x5e\x0f\x71\x00\x94\x60\x6f\xe4\xbf\xa5\x5d\x3d\xc4\x69\x4e\x31\xc4\x83\x91\xff\x3a\xc0\x7e\xd0\x0c\x3e\xed\x87\x4f\x00\xba\x25\x69\xbe\xd2\x07\xff\x7f\x0c\xeb\xd8\x9d\xed\xfe\xd7\xda\xc7\x60\xf3\x72\xb9\x89\x28\x36\x89\x71\xaa\x4f\x8e\xb6\xb9\xbf\x03\x00\x00\xff\xff\xd8\x47\x52\x38\xe8\x06\x00\x00")

func callLayoutGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_callLayoutGohtml,
		"call.layout.gohtml",
	)
}

func callLayoutGohtml() (*asset, error) {
	bytes, err := callLayoutGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "call.layout.gohtml", size: 1768, mode: os.FileMode(420), modTime: time.Unix(1610630959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _debugCallLayoutGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdd\x4e\xe3\x46\x14\xbe\xe7\x29\x8e\xe6\x26\xad\xc4\x1c\xcf\xf8\x37\x5e\x61\xaa\xee\x72\xd1\x4a\xec\x5e\x74\x0b\xf7\xc6\x1e\xf0\x68\x27\x76\xea\x38\x09\x25\xf2\x05\x54\x55\x55\x69\xd5\xbe\x4b\x05\x12\x85\x92\x67\x18\xbf\x51\x35\x4e\xc8\x0f\x84\x56\xa2\x95\xd8\x8b\x45\x22\x1a\x9f\x9f\xef\x9c\x99\xef\xcb\x19\x67\x32\x49\xc5\xb1\xcc\x05\x90\x54\x1c\x0d\x4f\x68\x12\x2b\x45\xea\x7a\x6b\x0b\x00\x60\x27\x95\x23\x48\x54\x3c\x18\x44\x24\x29\xf2\x2a\x96\xb9\x28\xa1\x57\x51\x87\xec\xb6\x01\x6d\x50\xe6\xef\x4e\x26\x78\x70\xf0\xed\x5e\x5d\xef\x58\x99\xff\xd0\x25\x8f\x41\xfc\x00\xf8\x26\x56\x0a\xf7\x64\x29\x92\x4a\x16\x39\x10\x99\x27\xa4\xae\xf5\x1f\xcd\xcf\x7a\xaa\x2f\x9b\xdf\x9b\x5f\xf5\xb5\xfe\x73\x32\x11\x6a\x20\xea\x5a\x5f\x37\xe7\x8f\x3c\x79\x5a\xd7\x30\x99\xcc\xa0\xde\x57\x71\x59\xbd\xaf\xe2\x5e\x7f\x53\x59\x7d\xd3\x5c\xe8\xe9\xab\x45\xf4\xc1\x40\x94\x79\xdc\x13\x75\x0d\xfa\x46\x4f\xf5\x5f\xcd\x4f\x4b\xe7\x9e\x18\x54\x32\x8f\x4d\x5f\xef\x86\xbd\x23\x51\x6e\x42\x6c\xce\xf5\x54\x5f\xe9\x4b\x7d\xad\xef\xf4\x95\xbe\xd3\xd7\xfa\x6a\x06\x51\xe4\xf9\x6c\x53\xdf\xcb\xb6\x40\x73\xae\xaf\xf4\x0d\x82\xbe\xd4\xb7\xfa\xba\xb9\xd0\x57\xfa\xb6\xf9\xa8\xef\xf4\xb4\x39\x6f\x2e\x9a\x8f\xcb\xc2\xaf\xa5\x52\x03\x91\x2c\x73\x36\x6c\x64\xda\x5c\xe8\x1b\x7d\xdb\xfc\xd6\xfc\xb2\x56\x76\x4f\x0e\x92\x59\xe5\xf5\x6e\xdb\x03\xcf\x05\xe0\x77\x22\x29\xca\xf4\x5d\xdc\x13\x40\x0c\xa5\xb0\xf8\xdb\xe9\xef\xae\x3c\xb5\x96\x18\xb2\x52\x1c\x47\x84\xdc\xf3\x7d\x54\xe5\x70\x54\xe5\xb4\x5f\xca\x5e\x5c\xfe\x48\xa0\xc8\x13\x25\x93\x0f\x11\x19\xcb\x3c\x2d\xc6\x58\xf4\x45\xfe\x45\xc7\x8a\xfb\xd2\x1a\x71\x4b\xc9\x41\x25\xf2\xaf\x86\x43\x99\x46\x0b\x35\x74\xb6\x3b\xbd\xbe\xd3\xd9\xee\x8c\x65\x5a\x65\x91\xc3\xd8\x76\x26\xe4\x49\x56\x45\x36\x63\x9d\x2f\xc9\xc3\x2e\xda\x4e\x06\xa3\x13\x38\xed\xa9\x7c\x10\x91\xac\xaa\xfa\xaf\x2c\x6b\x3c\x1e\xe3\xd8\xc1\xa2\x3c\xb1\x6c\xc6\x98\x35\x18\x9d\x10\x98\x41\x12\xee\x13\x98\x63\xb6\xeb\x63\xa9\x54\x44\x92\x61\x59\x8a\xbc\x7a\x53\xa8\xa2\x5c\xee\x48\xc2\x91\xa4\x49\x5c\x8a\x8a\x96\x26\x83\x9a\x60\x02\x23\x29\xc6\xaf\x8b\xd3\x88\x30\x60\xc0\x7d\xe0\xfe\xc6\xc6\x66\x07\x17\x57\x19\xa4\x11\x79\xcb\x6d\xe4\x2e\x74\x31\xf0\x1c\x45\x3d\x74\xbb\x36\xb8\x18\x84\x7e\x42\xd1\x77\x7d\xf4\x7c\x9f\x72\xf4\xbd\x2e\x72\x36\x5f\x51\x13\x7b\xe8\xa0\xcd\xdc\x98\x03\x87\xb6\x1a\x18\x57\xd8\xba\x94\x41\x99\x81\xac\xf8\x19\x70\xf4\x98\x7f\x46\xac\x8d\x87\x65\xce\xe2\x11\x97\x56\xfc\x24\xbd\xff\x48\xd7\xd3\xdc\xa7\xc5\x38\x57\x45\x9c\x46\x64\x32\x59\xd1\x55\x5d\xbf\x08\x85\xf7\xdd\x3c\x83\x3a\x83\x4d\xcb\xa1\x12\x11\x11\x23\x91\x17\x69\x4a\x5a\x3a\xd1\x83\x10\xc3\x18\x3d\xf4\xe6\x07\x6f\x96\x23\x1b\xbd\x05\x17\x2d\x5b\x19\xb7\x57\x0d\x94\x8f\xa8\x89\x59\xc9\xe3\xc0\xda\x34\x1b\xec\x79\x8c\x0d\xf6\x37\xf6\xea\x33\xb5\x1f\x65\xa1\x47\xd1\x7b\x82\xe4\x7f\xef\x3e\x30\x9a\x03\xce\xb1\xeb\xb9\x4b\x54\x06\x18\xb0\x2e\x30\xe5\x50\x67\xc5\x4a\x8d\xb5\xfd\xd8\xef\xa2\x07\x9c\xa1\x1d\x3a\x87\x7c\xb5\x1f\x46\xcd\x2e\xba\x18\x84\xce\xbe\x87\x8e\x67\x84\xce\x5d\xff\x3e\x80\xcf\x41\xcc\xbf\x72\xc0\xf9\xbf\xc4\xf9\xdc\xd9\x93\xa4\xe5\x69\x4f\x3d\x9e\x3d\x49\x5a\x2e\x66\x8f\xbf\x9c\x3d\xee\x8b\xcd\x9e\x63\xa9\x04\x15\x71\xd9\x8b\xcb\x0f\x74\x5c\x94\xe9\x73\x27\xd0\x53\x42\xb0\x61\x45\x68\x60\x53\x3b\xf3\x0c\xbb\x5f\xaf\xcc\x1b\x06\xc6\xb2\xcf\x1d\x0c\x58\x00\xab\xa3\xc8\xd8\x8d\xf1\x90\xbb\x0f\xd4\xeb\xae\xab\xf7\xd0\x3e\xeb\x05\x46\x3a\xe8\x8d\xa8\x6d\x14\x90\xd1\xe5\xd7\x82\x53\x4e\xf9\xd9\x5b\x33\xcd\x3c\xf0\xb1\x1b\x84\x6b\xba\x09\x03\xb4\x5d\x5b\x71\xf4\xc0\x5f\xd3\x6a\xe8\x07\xc8\xf8\x7e\x17\x42\x74\x99\x09\x60\xbc\x0b\x0e\x06\xce\xc3\x28\x8a\x8c\x9b\x7c\xea\xaf\xa9\x3a\x0c\x68\x8b\x4c\x39\x32\xc7\x07\x17\xb9\xeb\x52\x0c\xc3\x80\x3a\xe8\x7b\xde\x7a\xac\xef\x02\x53\xad\x17\x5a\xef\xfe\xa2\xdd\xee\x7f\x50\xf3\x8e\xd5\x5f\xde\xc2\xb3\xf7\x98\xe5\x5d\xfe\xe0\xce\xfd\x54\x54\xff\xc9\x6b\xfe\xb3\xe2\x5f\x44\xf1\x1b\xf4\xbe\xa6\xf6\x75\xad\x9b\x37\xf3\xd9\x4f\x06\x2b\x95\xa3\x99\x63\x27\x2b\x77\xb7\xe6\xbe\xbf\x03\x00\x00\xff\xff\x2f\x7f\x62\xa3\x67\x0c\x00\x00")

func debugCallLayoutGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_debugCallLayoutGohtml,
		"debug-call.layout.gohtml",
	)
}

func debugCallLayoutGohtml() (*asset, error) {
	bytes, err := debugCallLayoutGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debug-call.layout.gohtml", size: 3175, mode: os.FileMode(420), modTime: time.Unix(1608930677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _debugPageGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4d\x6e\xdb\x3e\x10\xc5\xf7\x3a\xc5\x64\xd6\xa1\x85\x7f\x8c\x3f\xd0\x85\xe8\x4d\xb3\xe9\xb6\x41\x0e\x40\x4b\x63\x6b\x10\x7e\xa8\xe4\xc8\xa9\x21\x78\xd1\x93\xf4\x0a\x5d\x34\x40\x5b\x20\x3d\x83\x7a\xa3\x82\xfe\x88\x9d\x3a\x29\x50\x2f\x2c\x70\xde\xcc\xe3\x6f\x1e\xab\x8b\x26\xd4\xb2\xee\x08\x5a\x71\x76\x56\x54\xf9\x03\xd6\xf8\xa5\x46\xf2\x98\x0b\x64\x9a\x59\x01\x00\x50\x5d\x28\x05\xef\xe9\x43\xcf\x91\x1a\x70\x24\x06\xc4\x2c\x13\x28\xb5\xd7\xb7\xa5\xba\x35\x31\x91\x68\xec\x65\xa1\xde\xe0\xa9\xe4\x8d\x23\x8d\x2b\xa6\xfb\x2e\x44\x41\xa8\x83\x17\xf2\xa2\xf1\x9e\x1b\x69\x75\x43\x2b\xae\x49\x6d\x0f\x97\xc0\x9e\x85\x8d\x55\xa9\x36\x96\xf4\x7f\x97\x90\xda\xc8\xfe\x4e\x49\x50\x0b\x16\xed\x03\xce\x8a\x23\xd6\xdb\x9b\x1b\x08\xde\xae\x8f\x30\x96\xfd\x1d\xb4\x91\x16\x1a\xcb\x24\x46\xb8\x2e\xe7\x21\x48\x92\x68\xba\x89\x63\x3f\xa9\x53\x42\x88\x64\x35\x26\x59\x5b\x4a\x2d\x51\x66\x8a\x21\xa5\x10\x79\xc9\x5e\xa3\xf1\xc1\xaf\x5d\xe8\xd3\xd3\x5d\xc2\x62\x69\x76\x4d\xf3\x7e\x59\x95\xbb\x43\x51\x95\xbb\x8c\xaa\x79\x68\xd6\x87\xc6\x86\x57\x50\x5b\x93\x92\xc6\xbc\xa6\x61\x4f\x11\x9c\xa8\xe9\x21\x91\x45\x88\x0e\x4c\x2d\x1c\xbc\xc6\x7d\x71\x2b\xb0\xef\x7a\x01\x6e\x34\x26\x32\xb1\x6e\x29\xe2\xc1\x29\xcf\xa8\x6c\x17\x83\x05\x17\x55\x72\xea\x0a\x21\x3f\x9f\x46\xa1\x8f\x82\xfb\x88\x77\x83\xe7\xa6\xbb\xce\xd4\xcf\x1d\xcb\x93\xe9\x5c\x3c\xcc\xc5\xab\x2e\xb2\x33\x71\x9d\x21\xaf\x10\x56\xc6\xf6\xa4\x71\xfc\x3c\xfe\x1c\xbf\xfd\xfa\x34\xfe\x78\x8a\xa0\xcc\x14\xfb\x25\xca\x86\x57\xfb\x7a\xfe\x0d\x03\x2f\xc0\x13\x4c\x6e\xb6\x00\x80\xb8\xd9\x1c\xd5\x67\x1d\xb7\xb7\xef\xae\x5f\xd0\xff\x9a\xdd\xff\x27\x1b\x3d\x1b\x68\xe3\xcb\xc2\x30\x08\xb9\xce\x1a\x21\xc0\x26\xbf\x99\xaa\x8d\xb5\x08\x93\xcd\xe6\xfc\xd6\x3f\x76\xd9\xcd\x93\x4d\xf4\x4f\x8c\xd3\x57\x19\xa7\x87\xfe\x76\x8a\xb3\x61\xd8\x67\xb4\xd9\xc0\xf8\x38\x3e\xe4\xbf\x2f\xe3\xf7\xf1\xeb\xf8\x30\x3e\x56\x65\x3b\x3d\x77\x79\x05\xd0\x37\xa7\x7c\x2f\x13\x9f\xe6\xd0\x99\x25\xed\x12\x28\xce\x5c\x8a\x61\x68\x68\xc1\xfe\xd0\x96\x6b\x47\xb1\x28\x7e\x07\x00\x00\xff\xff\x94\xba\xd0\xfd\x2e\x04\x00\x00")

func debugPageGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_debugPageGohtml,
		"debug.page.gohtml",
	)
}

func debugPageGohtml() (*asset, error) {
	bytes, err := debugPageGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debug.page.gohtml", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1608971665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _helpPageGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x6a\xdb\x40\x10\x80\xef\x7a\x8a\x61\xee\xb6\x69\x72\xb5\x7c\x2b\xf4\x35\x56\xd2\x38\x11\xac\x76\xc5\xee\xda\xad\x11\x82\x34\xbd\xa4\x50\x08\xf4\xde\x3e\x83\x6b\x6a\xe2\x92\x46\x7e\x85\xd9\x37\x0a\x2b\xdb\x89\xfc\x07\xc9\x1e\x24\xad\x76\x56\xfa\xbe\x99\x91\xaa\x0a\x1c\x15\xa5\x14\x8e\x00\x13\x61\x09\xa1\x5f\xd7\x51\x54\x55\x19\x8d\x73\x45\x80\x2e\x77\x92\xb0\xae\x3f\x91\x2c\xab\x8a\x54\xb6\xbf\x9c\xe8\x6c\x86\x75\x1d\x01\x00\x0c\xb3\x7c\x0a\xa9\x14\xd6\xc6\x98\x6a\xe5\x44\xae\xc8\x40\xe1\x7a\x97\x38\x6a\x03\x0e\x83\x84\x24\xe3\xa0\x3d\xf6\xec\x24\x4d\xc9\x5a\x04\xa3\x25\x6d\x97\x3a\xdb\xc2\xe0\x5f\x3c\xe7\x35\xaf\xfc\x1d\xaf\xfc\x2d\x2f\xc1\x7f\xe5\x86\x1b\xfe\xe3\xbf\xf3\x92\x9f\x78\xc5\x4b\xe0\x15\xf0\x82\xe7\xfe\x0e\xf8\x89\x1b\xfe\xcf\x4b\x7f\x03\xfc\x97\x1f\xfd\x7d\x08\x5f\xf8\x7b\x7e\xe0\xd5\x2b\xcd\x20\xcb\xa7\xa3\xe8\x75\x3e\xd6\xa6\x00\x91\xba\x5c\xab\x18\x11\x0a\x72\xd7\x3a\x8b\xb1\xd4\xf6\x90\xa6\x2b\x52\x24\x7b\x8e\x2f\x21\x8e\xbe\x38\x61\x48\xec\xe2\xc2\xd3\x7b\x21\x35\x46\x4b\x04\x25\x0a\x8a\xb1\x20\x6b\xc5\x15\x05\xf1\xcf\x36\xc6\x4b\x84\x52\x8a\x94\xae\xb5\xcc\xc8\xc4\xc8\x3f\x83\xcd\x69\xd9\xb4\x23\x19\xce\xc7\xa2\xfd\x7e\x1f\x47\xc3\xc1\x8e\xe3\xc0\x60\x23\x7f\x4e\x2a\xd5\xb2\xf7\xe1\xe2\x94\x56\xae\xca\x89\x03\x37\x2b\x29\x46\x3b\x49\x8a\xdc\xe1\x6e\x53\xe2\x14\x24\x4e\xf5\x4a\x93\x17\xc2\xcc\x42\xf5\x2f\x10\xa6\x42\x4e\x28\x46\xfe\xed\x6f\x79\xed\x6f\x78\xce\x8b\x50\x42\xff\xe3\x30\xa7\xfb\x44\xc3\x41\x48\xd8\x66\xde\xad\x54\x55\xe5\xe3\x4d\x9f\x9e\xe6\x3e\xd3\x7a\x2f\x5b\x95\x76\xd0\xff\x68\xcc\xb6\x6f\xcf\x25\xe0\x9d\xed\xb9\x1b\xa7\xba\xb2\xe9\x88\x3f\xb6\xb7\x9b\xe3\x57\x1f\x97\xa3\xaa\x48\x5a\x7a\x07\x66\x26\xd4\x15\x99\xb7\x50\xf2\x9a\x9b\x16\x29\x90\x7e\xe3\x7f\xed\x07\xc5\xcb\x00\x0d\x2d\xe8\xc3\x1b\x01\xdb\x3f\xc2\x41\x48\xd4\x5d\x8b\xb6\x17\xcf\x01\x00\x00\xff\xff\x95\xa0\x3f\xee\x6c\x04\x00\x00")

func helpPageGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_helpPageGohtml,
		"help.page.gohtml",
	)
}

func helpPageGohtml() (*asset, error) {
	bytes, err := helpPageGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "help.page.gohtml", size: 1132, mode: os.FileMode(420), modTime: time.Unix(1610184871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homePageGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x0a\x82\x40\x18\x85\xf7\x9e\xe2\x67\xf6\xe5\xa2\xad\xb9\xee\x1a\xa3\xf3\x07\x03\x3a\x4a\x0e\x42\x0c\xb3\xd0\x0e\xd0\x55\x8c\x94\x24\xa8\x33\xbc\xb9\x51\x34\xad\xda\x3d\x78\x1f\x1f\x9f\x73\x64\xb9\x6e\x2b\x69\x99\x44\x21\x3b\x16\xb4\xf5\x3e\x49\x9c\x53\x7c\xd4\x86\x49\x58\x6d\x2b\x16\xde\x1f\x9a\x9a\x9d\x63\xa3\xfe\xef\xa2\x51\x67\xe1\x7d\x42\x44\x94\x29\xdd\x53\x59\xc9\xae\xdb\x8b\xb2\x31\x56\x6a\xc3\x27\xaa\xed\x66\x27\xf2\x08\x44\xa8\xcd\x71\x0b\x17\xcc\x58\xc2\x48\x61\x08\x23\xa6\x30\x62\x8d\x6b\xc5\x13\x13\xe1\x81\x89\xc2\x80\x05\x77\xbc\x31\xe3\x15\xae\x59\xda\xfe\x14\x59\xaa\x74\x9f\x7f\x0b\x62\xca\x27\x00\x00\xff\xff\x6e\x98\xb6\x23\xc0\x00\x00\x00")

func homePageGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_homePageGohtml,
		"home.page.gohtml",
	)
}

func homePageGohtml() (*asset, error) {
	bytes, err := homePageGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.page.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1610703555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchPageGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x8e\xe3\x36\x17\xdc\xf7\x29\x1e\xb8\xf1\xf7\x01\xcd\x27\xfe\x88\x94\x14\x58\xbd\xc8\xac\xb3\xca\x09\x68\x89\xb6\x88\xe8\xc7\x23\xd1\x76\xf7\x08\x5e\xe4\x24\xb9\x42\x16\x19\x20\x09\x30\x39\x83\x72\xa3\x80\x92\xfb\xdf\x1d\x04\x86\x8d\x22\x59\xac\x57\x7c\x26\x6b\x1c\xc1\xdb\x66\x5f\x1b\x6f\x81\x6c\xcc\x60\x09\xe0\xf9\x7c\x73\x33\x8e\xa5\xdd\xba\xd6\x02\xf1\xce\xd7\x96\x9c\xcf\x3f\x5a\xd3\x17\xd5\x38\xda\xb6\x7c\x4d\xd8\x74\xe5\x03\x39\x9f\x6f\x00\x00\xd6\xa5\x3b\x42\x51\x9b\x61\xc8\x49\xd1\xb5\xde\xb8\xd6\xf6\xd0\x78\x2a\xc9\xdd\x4c\x98\x49\xdb\xae\x6f\xc0\x14\xde\x75\x6d\x4e\x5e\x2c\xbc\x55\x70\xed\xfe\xe0\xe9\xae\xef\x0e\x7b\x68\x36\xaf\x34\x66\xea\xbc\x0e\xae\xcc\xc9\x30\x9b\xb3\x3d\x79\xdc\x1a\x4a\xd0\xe0\xa0\xef\x6a\x68\x7a\x3a\x34\x54\x10\xf0\x0f\x7b\x9b\x13\x6f\xef\x3d\x81\xd6\x34\xf6\x71\xe3\x1b\xe1\x59\x7c\xd8\x9b\xf6\x8a\x11\xba\xec\x0e\x45\x37\x66\x70\x05\x35\x65\xd9\xb5\x9c\xdc\xad\x0d\x54\xbd\xdd\xe6\x84\x40\xd7\x16\xb5\x2b\x7e\xca\xc9\xc9\xb5\x65\x77\xc2\x6e\x6f\xdb\xff\xad\xa2\xc1\x1b\xef\x8a\x68\x29\x89\x95\xad\xf7\x58\xf9\xa6\x5e\xdd\xae\x96\x29\xd8\x9a\xcf\xab\xdb\xd5\xc9\x95\xbe\xca\xa5\x62\xb7\x95\x75\xbb\xca\xe7\x5a\xb1\xd5\xff\xaf\x58\x5c\x6c\x1e\x77\x70\xdf\xd4\xed\x90\x93\xca\xfb\xfd\x77\x51\x74\x3a\x9d\xf0\x24\xb1\xeb\x77\x91\x60\x8c\x45\xc3\x71\x47\x60\x11\x25\x42\x10\xb8\xa8\xce\x78\xeb\xea\x3a\x27\xc5\xa1\xef\x6d\xeb\x3f\x75\x75\xf7\xdc\xc1\x8d\x83\x8d\xa3\x9f\x0f\x76\x08\xff\x13\x81\xa3\xb3\xa7\xef\xbb\xfb\x9c\x30\x60\xc0\x35\x70\xfd\x81\x25\x80\xf5\xde\xf8\x0a\xca\x9c\xfc\xa0\x50\x28\x05\x0a\x93\x54\x1b\x14\x32\x09\x5f\x60\xf3\x07\x45\xcc\x51\xc4\x49\x85\xa9\x50\x05\x72\x99\x2e\x93\x29\x45\xce\x25\x0a\xad\x29\x0a\x85\x2c\xa3\xa8\x95\x46\x15\x53\x8e\x5c\xc6\xc0\x51\xc6\x62\xc1\xa8\x53\x1d\xcc\xa0\xe4\x31\xca\x58\x2e\x08\x38\x72\x3d\x8b\x69\xa9\x28\xca\x24\xc6\x4c\x24\x14\x33\xad\x02\x21\xe1\x14\x75\x22\x31\x4e\x33\xca\x51\x30\x0d\x1c\x99\xa6\xcb\x26\x8e\x59\x9a\xd4\xc8\x98\x44\xc1\x13\x13\x0c\x08\xf5\x64\x58\xa1\x88\x75\x85\x29\xe7\xef\x56\x82\xd7\x23\x45\xce\x54\xc1\x28\x26\x3c\x45\x91\x48\x1a\x0a\x07\x79\x4e\x39\xc6\xa9\x46\x1d\x4e\x13\xeb\x60\x54\xc4\x31\xc5\x2c\x49\x2e\x50\x20\x53\x1a\x18\xe5\xa8\x78\x60\x8b\x44\x53\x11\x5a\x44\x45\x70\x7b\xc1\x1c\x85\x4e\x80\x85\x39\xa5\x50\x65\x54\x60\xa2\x40\xa0\x48\xf5\x97\x86\xa3\x52\x49\xe8\xb5\x96\x05\x03\x54\x52\x62\x2c\xd4\x93\x85\x00\x82\x81\xb9\x61\x4c\xa4\x14\x65\x16\x3f\xc2\x40\x62\x14\x95\x12\x14\x63\x41\x31\x0b\xdd\x66\x22\x9b\x11\xaa\x34\x9e\xad\x31\x96\xa1\x4c\xd3\x0b\xca\xe2\x2f\x24\xfa\xe0\x56\x86\x4b\x77\x65\x69\x1d\x99\xbb\x75\x14\x5e\xd6\x9b\x97\x1c\x95\xee\x78\xf5\x71\x2f\x2f\x76\x38\x6c\x1a\xe7\x9f\xaf\xa6\x6f\x61\xe3\x5b\xba\xef\x5d\x63\xfa\x07\x02\x47\x53\x1f\x6c\x4e\xa6\x5f\xa6\xbf\xa6\xdf\xff\xfe\x79\xfa\xf3\x65\xda\x44\x21\x0b\x96\xf1\xa5\xce\x33\xfe\x30\xab\x66\xca\x38\xba\x2d\xb4\x16\x70\xc9\x3e\x20\x21\xe6\x9e\x84\xe7\x55\xfc\x64\xea\x7a\x78\x39\x0d\xff\x16\x83\xea\x5a\xd2\x54\xfd\xfb\xc9\x71\xec\x4d\xbb\xb3\xcf\xfa\xd7\xda\x3c\x8e\xcf\xd9\x5d\x98\xba\x5e\xb2\xfb\x3d\x6b\x89\xec\x2b\x0d\x7f\x71\x16\x5b\x0f\xf6\x3f\x1f\xe3\x6d\x12\x2f\xc7\x90\x8f\xdc\x4a\x92\xbb\x71\xbc\x74\xed\x7c\x86\xe9\xdb\xf4\x35\xfc\xfc\x3a\xfd\x31\xfd\x36\x7d\x9d\xbe\xad\xa3\x4a\x5e\xbd\x01\x37\x6f\x4d\xdf\xbc\x1a\x3c\x82\x7f\x02\x00\x00\xff\xff\x39\x53\x35\xc1\xb6\x06\x00\x00")

func searchPageGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_searchPageGohtml,
		"search.page.gohtml",
	)
}

func searchPageGohtml() (*asset, error) {
	bytes, err := searchPageGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search.page.gohtml", size: 1718, mode: os.FileMode(420), modTime: time.Unix(1610705920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.layout.gohtml":       baseLayoutGohtml,
	"call.layout.gohtml":       callLayoutGohtml,
	"debug-call.layout.gohtml": debugCallLayoutGohtml,
	"debug.page.gohtml":        debugPageGohtml,
	"help.page.gohtml":         helpPageGohtml,
	"home.page.gohtml":         homePageGohtml,
	"search.page.gohtml":       searchPageGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.layout.gohtml":       &bintree{baseLayoutGohtml, map[string]*bintree{}},
	"call.layout.gohtml":       &bintree{callLayoutGohtml, map[string]*bintree{}},
	"debug-call.layout.gohtml": &bintree{debugCallLayoutGohtml, map[string]*bintree{}},
	"debug.page.gohtml":        &bintree{debugPageGohtml, map[string]*bintree{}},
	"help.page.gohtml":         &bintree{helpPageGohtml, map[string]*bintree{}},
	"home.page.gohtml":         &bintree{homePageGohtml, map[string]*bintree{}},
	"search.page.gohtml":       &bintree{searchPageGohtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
